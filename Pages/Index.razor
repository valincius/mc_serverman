@page "/"

@using System.Text
@using System.Threading
@using Docker.DotNet
@using mc_serverman.Services
@inject DockerService DockerService

<h1>Containers!</h1>

<button @onclick="CreateNewServer">Add Server</button>
<button @onclick="ConnectToRcon">Connect To Rcon</button>

@if(DockerService.Containers != null) {
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>State</th>
                <th>Name</th>
                <th>Port</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var container in DockerService.Containers) {
            <tr>
                <td>@container.ID.Substring(0, 12)</td>
                <td>@container.Status</td>
                <td>@container.Name</td>
                <td>@container.Port</td>
                
            </tr>
        }
        </tbody>
    </table>
}

<pre>@stdout</pre>

<input type="text" @bind-value="command" />
<button @onclick="SendCommand">Send</button>

@code {
    CancellationTokenSource pollingCancellationToken;
    MultiplexedStream stream;

    string stdout = "";
    string command = "";

    protected override async Task OnInitializedAsync() {
        pollingCancellationToken?.Cancel();
        PollRefresh();
        await Task.FromResult(0);
    }
    private async void CreateNewServer() {
        await DockerService.CreateNewServer();
    }
    private async void PollRefresh() {
        pollingCancellationToken = new CancellationTokenSource();
        while(!pollingCancellationToken.IsCancellationRequested) {
            await DockerService.RefreshContainers();
            if(stream != null) {
                var buffer = System.Buffers.ArrayPool<byte>.Shared.Rent(81920);
                var read = await stream.ReadOutputAsync(buffer, 0, buffer.Length, CancellationToken.None);
                stdout += Encoding.UTF8.GetString(buffer, 0, read.Count);
                System.Buffers.ArrayPool<byte>.Shared.Return(buffer);
            }

            StateHasChanged();

            await Task.Delay(1000);
        }
    }
    private async void ConnectToRcon() {
        stream = await DockerService.ConnectToRcon("e845b8f924df42e6ab54d74b2b6156fd42c66d57fdcbbde5014358d1c9f896dc");
    }
    private async void SendCommand() {
        var cmdBytes = Encoding.UTF8.GetBytes(command + Environment.NewLine);
        await stream.WriteAsync(cmdBytes, 0, cmdBytes.Length, CancellationToken.None);
        command = "";
    }
}