@page "/"

@using System.Threading
@using mc_serverman.Services
@using mc_serverman.Models

@inject DockerService DockerService

@if (DockerService.Containers != null) {
    <table class="table">
        <!-- make this look like minecraft client server menu -->
        <tbody>
            @foreach (var container in DockerService.Containers.ToList()) {
            <tr @onclick="(() => SelectContainer(container))" style="background-color: @(container == selectedContainer ? "lightgreen" : "");">
                <td>@container.Name (@container.ID.Substring(0, 12))</td>
                <td>@container.Status</td>
                <td>@container.Port</td>
                <td>@container.TotalPlayers / @container.MaxPlayers (@string.Join(", ", container.Players.Select(p => $"-{p}-")))</td>
            </tr>
            }
        </tbody>
    </table>
}

<button @onclick="CreateNewServer">Create New Server</button> <!-- Show a modal here, allow choosing name, port, config options, persistence -->

@if (selectedContainer != null) {
    <!--
        have this bring us to another page where we can change server options
        in this screen also allow for file browsing/editing - maybe bake in VS Code?
        take a look at mcmyadmin & see what we can copy from them :)
    -->
    <pre>@selectedContainer.StdOut</pre>

    <input type="text" @bind="command" />
    <button @onclick="SendCommand">Send</button>
}

@code {
    // refreshing sometimes breaks the app, dunno why, hard to debug

    MCContainer selectedContainer;

    CancellationTokenSource pollingCancellationToken;
    Timer refreshTimer;

    string command = "";

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            pollingCancellationToken?.Cancel();
            PollForUpdates();
        }
        base.OnAfterRender(firstRender);
    }

    private async void PollForUpdates() {
        pollingCancellationToken = new CancellationTokenSource();
        while (!pollingCancellationToken.IsCancellationRequested) {
            await DockerService.RefreshContainers();
            StateHasChanged();

            await Task.Delay(500);
        }
    }

    private async Task CreateNewServer() {
        await DockerService.CreateNewServer();
    }

    private void SelectContainer(MCContainer container) {
        if (selectedContainer != container) {
            selectedContainer = container;
        } else {
            selectedContainer = null;
        }
        StateHasChanged();
    }

    private async Task SendCommand() {
        selectedContainer.StdOut += await selectedContainer.RconStream.Send(command);
        command = "";
        StateHasChanged();
    }
}